server {
    listen 5210;
    error_log  logs/new_proxy_error.log  info;

    # HTTP Ping 接口
    location = /client/api/ping/net {
        content_by_lua_block {
            local cjson = require("cjson.safe")
            ngx.header["Access-Control-Allow-Origin"] = "*"
            ngx.header["Content-Type"] = "application/json"
            ngx.say(cjson.encode({
                state = 0,
                message = "成功",
                value = tostring(os.time())
            }))
        }
    }

    # WebSocket 代理
    location / {
        access_by_lua_block {
            -- ################################### 屏蔽非 websocket ################################# --
            local ip = ngx.var.remote_addr
            local dict = ngx.shared.ip_block_list

            -- 检查 IP 是否被封禁
            local is_blocked = dict:get(ip)
            if is_blocked then
                ngx.log(ngx.ERR, "Blocked IP: ", ip)
                ngx.exit(403)
            end

            -- 检查是否是 WebSocket 请求
            local upgrade = ngx.var.http_upgrade
            if not upgrade or upgrade:lower() ~= "websocket" then
                ngx.log(ngx.ERR, "Non-websocket request from: ", ip)

                -- 把 IP 加入封禁列表，设置 10 分钟（600 秒）
                dict:set(ip, true, 600)

                ngx.exit(403)
            end
            -- ################################### 屏蔽非 websocket ################################# --


            -- ################################### IP段检测 ################################# --
            local iputils = require("resty.iputils")
            -- 允许访问的白名单 IP 和 IP 段
            local whitelist_ips = {
                "127.0.0.1",
                "172.26.146.0/24",         -- 阿里内网
                "172.26.146.0/16",      -- IP段 (CIDR格式)
                "10.0.0.0/16"          -- IP段 (CIDR格式)
            }

            -- 解析CIDR范围
            local whitelist_cidrs = iputils.parse_cidrs(whitelist_ips)

            -- 检查IP是否在白名单中
            if iputils.ip_in_cidrs(ip, whitelist_cidrs) then
                ngx.log(ngx.ERR, "Whitelisted IP allowed: ", ip)
            else
                ngx.exit(403)
                return
            end
            -- ################################### IP段检测 ################################# --

            local servers = {
                "www.baidu.com:443"
            }

            -- 随机选择一个后端服务器
            local function get_random_server()
                math.randomseed(os.time())
                local index = math.random(1, #servers)
                return servers[index]
            end

            local function get_host(target)
                return target:match("^([^:]+)")
            end

            local function get_websocket_url(target)
                return "wss://" .. target
            end

            local client = require "resty.websocket.client"
            local server = require "resty.websocket.server"
            local cjson = require("cjson.safe")

            -- 随机选一个服务器
            local random_server_host = get_random_server()
            --local random_server_host = "wss.shangweiled.com:443"
            local ws_url = get_websocket_url(random_server_host)

            -- 获取请求头部信息
            local headers = ngx.req.get_headers() or {}
            -- ngx.log(ngx.ERR, cjson.encode(headers))
            local upgrade_header = headers["Upgrade"] or headers["upgrade"]

            -- 仅在 `Upgrade` 请求头为 WebSocket 时进行代理
            if upgrade_header and upgrade_header:lower() == "websocket" then
                ngx.log(ngx.ERR, "WebSocket connecting to: " .. ws_url)

                -- 创建 WebSocket 客户端
                local client = client:new()
                local ok, err = client:connect(ws_url, {
                    headers = headers
                })
                if not ok then
                    ngx.log(ngx.ERR, "WebSocket Client Err: ", err)
                    ngx.exit(ngx.HTTP_BAD_GATEWAY)
                else
                    ngx.log(ngx.ERR, "WebSocket Client ok: " .. ws_url)
                end

                -- WebSocket 代理服务器
                local ws_server, err = server:new()
                if not ws_server then
                    ngx.log(ngx.ERR, "failed to new websocket server: ", err)
                    return ngx.exit(403)
                end

                -- 数据转发函数
                local opcode_mapper = {
                    ["continuation"] = 0x0,
                    ["text"] = 0x1,
                    ["binary"] = 0x2,
                    ["close"] = 0x8,
                    ["ping"] = 0x9,
                    ["pong"] = 0xA,
                }

                -- 数据转发函数 - 客户端到 WebSocket 服务器
                local function ws_proxy_c2zw(sock_from, sock_to, flip_masking)
                    while true do
                        local data, typ, err = sock_from:recv_frame(flip_masking)
                        if not data then
                            ngx.log(ngx.ERR, "ws_proxy_c2zw recv_frame Err: ", err)
                            break
                        end

                        local fin = (typ ~= "continuation")
                        local bytes, err = sock_to:send_frame(fin, opcode_mapper[typ], data, flip_masking)
                        if not bytes then
                            ngx.log(ngx.ERR, "send_frame Err: ", err)
                            break
                        end
                    end

                    sock_from:send_close()
                    sock_to:send_close()
                end

                -- 数据转发函数 - WebSocket 服务器到客户端
                local function ws_proxy_zw2c(sock_from, sock_to, flip_masking)
                    while true do
                        local data, typ, err = sock_from:recv_frame(flip_masking)
                        if not data then
                            ngx.log(ngx.ERR, "ws_proxy_zw2c recv_frame Err: ", err)
                            break
                        end

                        local fin = (typ ~= "continuation")
                        if typ == "close" then
                            break
                        end

                        if data then
                            local bytes, err = sock_to:send_frame(fin, opcode_mapper[typ], data, flip_masking)
                            if not bytes then
                                ngx.log(ngx.ERR, "ws_proxy_zw2c send_frame Err: ", err)
                                break
                            end
                        end
                    end

                    sock_from:send_close()
                    sock_to:send_close()
                end

                -- 安全的启动协程
                local function safe_proxy(func, ...)
                    local ok, err = pcall(func, ...)
                    if not ok then
                        ngx.log(ngx.ERR, "proxy Err: ", err)
                    end
                end

                -- 启动 WebSocket 数据转发协程
                local s2c = ngx.thread.spawn(safe_proxy, ws_proxy_zw2c, client, ws_server, false)
                local c2s = ngx.thread.spawn(safe_proxy, ws_proxy_c2zw, ws_server, client, true)

            else
                ngx.log(ngx.ERR, "~")
            end
        }

        # 转发 WebSocket 请求到选中的服务器
        proxy_pass http://$host;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header Origin "https://www.baidu.com";
    }
}
